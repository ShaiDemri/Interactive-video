{"version":3,"sources":["assets/billionaire_v2.mp4","serviceWorker.js","OverlayButton.jsx","VideoPlayer.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","button","margin","spacing","position","zIndex","bottom","left","background","boxShadow","borderRadius","buttonBlue","OverlayButton","text","onclick","icon","color","classes","Icon","variant","size","className","clsx","onClick","root","paddingTop","player","top","width","height","VideoPlayer","React","useState","isPlaying","setIsPlaying","play","timeElapsed","setTimeElapsed","showSpinBtn","setShowSpinBtn","showDownloadBtn","setShowDownloadBtn","enterSpinCondition","setEnterSpinCondition","vidRef","useRef","handleInactivity","a","current","seekTo","handleInactivityCb","useCallback","timer","handleTimeJump","clearTimeout","setTimeout","useEffect","Math","floor","url","billionaireVideo","controls","ref","volume","playing","onStart","style","progressInterval","onProgress","playedSeconds","onSeek","seconds","LoopIcon","GetAppIcon","isIOS","open","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d50abf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/billionaire_v2.f91824c5.mp4\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Fab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(5),\n    position: \"absolute\",\n    zIndex: 10,\n    bottom: \"1%\",\n    left: \"30%\",\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n    borderRadius: 3,\n  },\n  buttonBlue: {\n    background: \"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)\",\n    boxShadow: \"0 3px 5px 2px rgba(33, 203, 243, .3)\",\n  },\n}));\n\nexport default function OverlayButton({\n  text,\n  onclick,\n  icon,\n  color = \"primary\",\n}) {\n  const classes = useStyles();\n  const Icon = icon;\n  return (\n    <Button\n      variant=\"extended\"\n      size=\"small\"\n      color={color}\n      className={clsx(classes.button, {\n        [classes.buttonBlue]: color === \"blue\",\n      })}\n      onClick={onclick}\n    >\n      <Icon />\n      {text}\n    </Button>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ReactPlayer from \"react-player\";\nimport { isIOS } from \"react-device-detect\";\nimport LoopIcon from \"@material-ui/icons/LoopOutlined\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\n\nimport billionaireVideo from \"./assets/billionaire_v2.mp4\";\nimport OverlayButton from \"./OverlayButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n    paddingTop: \"56.25%\" /* 9 / 16 = 0.5625 */,\n  },\n  player: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\nconst androidURI =\n  \"https://play.google.com/store/apps/details?id=com.huuuge.casino.texas&hl=en\";\nconst iosURI =\n  \"https://apps.apple.com/us/app/billionaire-casino-slots-777/id1098617974\";\nexport default function VideoPlayer() {\n  const classes = useStyles();\n  const [isPlaying, setIsPlaying] = React.useState(true);\n  const play = () => {\n    setIsPlaying(true);\n  };\n  const pause = () => {\n    setIsPlaying(false);\n  };\n\n  const [timeElapsed, setTimeElapsed] = React.useState(0);\n  const [showSpinBtn, setShowSpinBtn] = React.useState(false);\n  const [showDownloadBtn, setShowDownloadBtn] = React.useState(false);\n  const [enterSpinCondition, setEnterSpinCondition] = React.useState(true);\n  const vidRef = useRef();\n  const handleInactivity = async () => {\n    await vidRef.current.seekTo(20.5, \"seconds\");\n    await vidRef.current.seekTo(21, \"seconds\");\n    setShowSpinBtn(false);\n    setEnterSpinCondition(false);\n    play();\n  };\n  const handleInactivityCb = React.useCallback(handleInactivity, []);\n  let timer = React.useRef();\n  const handleTimeJump = React.useCallback(() => {\n    clearTimeout(timer.current);\n    timer.current = setTimeout(handleInactivityCb, 10000); // TODO: W8 10 sec\n  }, [handleInactivityCb]);\n\n  React.useEffect(() => {\n    if (enterSpinCondition && Math.floor(timeElapsed) === 4) {\n      setEnterSpinCondition(false);\n      pause();\n      setShowSpinBtn(true);\n    }\n    setShowDownloadBtn(timeElapsed >= 21);\n  }, [timeElapsed, isPlaying, showSpinBtn, enterSpinCondition]);\n  return (\n    <div className={classes.root}>\n      <ReactPlayer\n        className={classes.player}\n        url={billionaireVideo}\n        width=\"100%\"\n        height=\"100%\"\n        controls={true}\n        ref={vidRef}\n        volume={0.01}\n        playing={isPlaying}\n        onStart={play}\n        style={{ position: \"relative\" }}\n        progressInterval={300}\n        onProgress={({ playedSeconds }) => {\n          setTimeElapsed(playedSeconds);\n        }}\n        onSeek={(seconds) => {\n          setEnterSpinCondition(seconds < 4);\n        }}\n      ></ReactPlayer>\n      {showSpinBtn ? (\n        <OverlayButton\n          text=\"spin\"\n          color={\"blue\"}\n          icon={LoopIcon}\n          onclick={() => {\n            clearTimeout(timer.current);\n            play();\n            setShowSpinBtn(false);\n          }}\n        >\n          {handleTimeJump()}\n        </OverlayButton>\n      ) : (\n        <></>\n      )}\n      {showDownloadBtn ? (\n        <OverlayButton\n          text=\"Download now!\"\n          icon={GetAppIcon}\n          onclick={() => {\n            if (isIOS) {\n              window.open(iosURI);\n            } else {\n              window.open(androidURI);\n            }\n          }}\n        />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport VideoPlayer from \"./VideoPlayer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <VideoPlayer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}